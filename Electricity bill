# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import (
    mean_absolute_error,
    mean_squared_error,
    r2_score,
    mean_absolute_percentage_error
)
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from sklearn.impute import SimpleImputer

# Streamlit app setup
st.set_page_config(
    page_title="‚ö° Electricity Bill Prediction ",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Custom CSS for additional styling
st.markdown("""
    <style>
    .main {
        background-color:rgb(246, 246, 246);
    }
    .sidebar .sidebar-content {
        background-color:rgb(255, 255, 255);
    }
    </style>
    """, unsafe_allow_html=True)

# Application Title and Description
st.title("‚ö° Electricity Bill Prediction Platform")
st.markdown("""
Welcome to the Electricity Bill Prediction Platform! Upload your dataset, select the target variable,
choose your desired regression model, and visualize the performance metrics and predictions.
""")

@st.cache_data
def load_data(uploaded_file):
    return pd.read_csv(uploaded_file)

@st.cache_resource
def get_preprocessor(X):
    # Automatically detect numeric and categorical features
    numeric_features = X.select_dtypes(include=[np.number]).columns.tolist()
    categorical_features = X.select_dtypes(exclude=[np.number]).columns.tolist()
    
    # Preprocessing pipeline
    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='median')),
        ('scaler', StandardScaler())
    ])
    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('encoder', OneHotEncoder(handle_unknown='ignore'))
    ])
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('cat', categorical_transformer, categorical_features)
        ]
    )
    return preprocessor, numeric_features, categorical_features

def calculate_metrics(y_true, y_pred, X_test):
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    mape = mean_absolute_percentage_error(y_true, y_pred) * 100  # Convert to percentage
    r2 = r2_score(y_true, y_pred)
    n = len(y_true)  # Number of observations
    p = X_test.shape[1]  # Number of predictors
    adj_r2 = 1 - ((1 - r2) * (n - 1) / (n - p - 1)) if n > p + 1 else None
    return mae, mse, rmse, mape, r2, adj_r2

def main():
    # File uploader
    uploaded_file = st.sidebar.file_uploader(
        "üìÇ Upload your dataset (CSV format)", 
        type="csv"
    )
    
    if uploaded_file:
        try:
            # Load dataset
            data = load_data(uploaded_file)
            st.sidebar.success("üéâ Dataset uploaded successfully!")
    
            # Data preview
            with st.container():
                st.subheader("üîç Dataset Preview")
                st.dataframe(data.head())
                
                # Correlation Heatmap Debugging
                with st.container():
                    st.subheader("üìä Correlation Heatmap")
                    try:
                        # Identify numeric features directly from the dataset
                        numeric_columns = data.select_dtypes(include=[np.number]).columns.tolist()
                        
                        if len(numeric_columns) > 1:  # Ensure at least two numeric columns for correlation
                            correlation_matrix = data[numeric_columns].corr()

                            # Plotly heatmap
                            fig_heatmap = px.imshow(
                                correlation_matrix,
                                text_auto=True,
                                color_continuous_scale="RdBu",
                                labels=dict(x="Features", y="Features", color="Correlation"),
                                title="Correlation Heatmap",
                            )
                            st.plotly_chart(fig_heatmap, use_container_width=True)
                        else:
                            st.warning("Not enough numeric features to create a correlation heatmap.")
                    except Exception as e:
                        st.error(f"Error generating heatmap: {e}")
    
            # Target column selection
            st.sidebar.header("‚öô Target and Features")
            target_column = st.sidebar.selectbox("üéØ Select Target Column", data.columns)
            features = [col for col in data.columns if col != target_column]
    
            # Prepare features and target
            X = data[features]
            y = data[target_column]
    
            # Train-test split
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.2, random_state=42
            )
    
            # Models
            models = {
                'Linear Regression': LinearRegression(),
                'Decision Tree Regressor': DecisionTreeRegressor(random_state=42),
                'Random Forest Regressor': RandomForestRegressor(n_estimators=100, random_state=42)
            }
    
            st.sidebar.header("ü§ñ Model Selection")
            selected_model_name = st.sidebar.radio("Select Model", list(models.keys()))
            selected_model = models[selected_model_name]
    
            # Build and train the pipeline
            pipeline = Pipeline(steps=[
                ('preprocessor', get_preprocessor(X)[0]),
                ('model', selected_model)
            ])
            pipeline.fit(X_train, y_train)
    
            # Make predictions
            y_pred = pipeline.predict(X_test)
    
            # Calculate metrics
            mae, mse, rmse, mape, r2, adj_r2 = calculate_metrics(y_test, y_pred, X_test)
    
            # Layout with tabs and columns
            tabs = st.tabs(["üìä Performance Metrics", "üìà Predictions", "üìâ Residual Analysis"])
    
            # Tab 1: Performance Metrics
            with tabs[0]:
                st.subheader(f"### Model: {selected_model_name}")
                st.markdown("Performance Metrics")
    
                # Metrics Table
                metrics_df = pd.DataFrame({
                    'Metric': ['Mean Absolute Error (MAE)', 'Mean Squared Error (MSE)', 
                               'Root Mean Squared Error (RMSE)', 'Mean Absolute Percentage Error (MAPE)', 
                               'R¬≤ Score', 'Adjusted R¬≤ Score'],
                    'Value': [f"{mae:.2f}", f"{mse:.2f}", f"{rmse:.2f}", f"{mape:.2f}%", 
                              f"{r2:.2f}", f"{adj_r2:.2f}" if adj_r2 is not None else "N/A"]
                })
                st.table(metrics_df.set_index('Metric'))
    
                # Metrics Visualization
                st.markdown("#### üìä Metrics Visualization")
                fig_metrics = px.bar(
                    metrics_df,
                    x='Metric',
                    y='Value',
                    text='Value',
                    title="Regression Metrics",
                    labels={'Value': 'Metric Value'},
                    template="plotly_white",
                    color='Metric',
                    color_discrete_sequence=px.colors.qualitative.Pastel
                )
                fig_metrics.update_traces(textposition='auto')
                fig_metrics.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig_metrics, use_container_width=True)
    
            # Tab 2: Predictions
            with tabs[1]:
                st.subheader("### Predictions Overview")
    
                # Actual vs Predicted Scatter Plot
                st.markdown("#### üîç Actual vs Predicted Values")
                fig_actual_pred = px.scatter(
                    x=y_test, y=y_pred,
                    labels={'x': 'Actual Values', 'y': 'Predicted Values'},
                    title="Actual vs Predicted Values",
                    template="plotly_white",
                    trendline='ols',
                    trendline_color_override='red'
                )
                fig_actual_pred.add_trace(
                    go.Scatter(
                        x=[min(y_test), max(y_test)],
                        y=[min(y_test), max(y_test)],
                        mode='lines',
                        name='Ideal Fit',
                        line=dict(color='green', dash='dash')
                    )
                )
                st.plotly_chart(fig_actual_pred, use_container_width=True)
    
            # Tab 3: Residual Analysis
            with tabs[2]:
                st.subheader("### Residual Analysis")
    
                # Residuals vs Predicted Values
                st.markdown("#### üìâ Residuals vs Predicted Values")
                residuals = y_test - y_pred
                fig_residual = px.scatter(
                    x=y_pred, y=residuals,
                    labels={'x': 'Predicted Values', 'y': 'Residuals'},
                    title="Residuals vs Predicted Values",
                    template="plotly_white",
                    trendline='ols',
                    trendline_color_override='red'
                )
                fig_residual.add_hline(y=0, line_dash="dash", line_color="green")
                st.plotly_chart(fig_residual, use_container_width=True)
    
            # Prediction Form
            st.sidebar.header("üìä Make a Prediction")
            st.sidebar.markdown("Enter values for the features to predict the electricity bill.")
            input_features = {}
            with st.sidebar.form("prediction_form"):
                # Numeric Inputs
                for feature in get_preprocessor(X)[1]:
                    input_features[feature] = st.number_input(
                        f"Enter {feature}:",
                        value=float(X_train[feature].median()),
                        format="%.4f"
                    )
                # Categorical Inputs
                for feature in get_preprocessor(X)[2]:
                    unique_values = X_train[feature].dropna().unique().tolist()
                    input_features[feature] = st.selectbox(
                        f"Select {feature}:",
                        options=sorted(unique_values)
                    )
                # Submit Button
                submit_button = st.form_submit_button(label="üîÆ Predict")
    
            if submit_button:
                try:
                    input_df = pd.DataFrame([input_features])
                    prediction = pipeline.predict(input_df)
                    st.sidebar.success(f"üéØ Predicted {target_column}: {prediction[0]:.2f}")
                except Exception as e:
                    st.sidebar.error(f"‚ùå Prediction Error: {e}")
        except Exception as e:
            st.error(f"‚ùå Error Loading Dataset: {e}")
    else:
        st.info("üìÇ Please upload a dataset to get started.")

if __name__ == "__main__":
    main()
